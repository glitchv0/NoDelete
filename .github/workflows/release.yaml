name: Create Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Add permissions for the workflow
permissions:
  contents: write
  pull-requests: read
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Remove the token parameter - it's not needed and can cause issues
        # token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # Simplify version detection - avoid complex semantic-release setup
    - name: Get next version
      id: version
      run: |
        # Get the last tag or default to 1.0.0
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          # Remove 'v' prefix if present
          LAST_VERSION=$(echo "$LAST_TAG" | sed 's/^v//')
          echo "Last tag: $LAST_TAG (version: $LAST_VERSION)"
        else
          LAST_VERSION="0.0.0"
          echo "No previous tags found, starting from $LAST_VERSION"
        fi
        
        # Simple version increment based on commit messages
        if [ -n "$LAST_TAG" ] && git log --oneline $LAST_TAG..HEAD | grep -q "feat\|BREAKING"; then
          # Has features or breaking changes, increment minor
          IFS='.' read -ra VERSION_PARTS <<< "$LAST_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          NEXT_VERSION="$MAJOR.$((MINOR + 1)).0"
        elif [ -n "$LAST_TAG" ]; then
          # Just bug fixes, increment patch
          IFS='.' read -ra VERSION_PARTS <<< "$LAST_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
        else
          # First release
          NEXT_VERSION="1.0.0"
        fi
        
        echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        echo "Next version will be: $NEXT_VERSION"

    - name: Update addon version files
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Update .toc file version if it exists
        if [ -f "NoDelete.toc" ]; then
          sed -i "s/## Version: .*/## Version: $VERSION/" NoDelete.toc
        fi
        
        # Update any Lua version constants if they exist
        find . -name "*.lua" -exec sed -i "s/local ADDON_VERSION = .*/local ADDON_VERSION = \"$VERSION\"/" {} \;

    - name: Create addon zip
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        
        # Create a clean directory for the addon
        mkdir -p "NoDelete-$VERSION/NoDelete"
        
        # Copy addon files (exclude git files, workflows, etc.)
        rsync -av --exclude='.git*' --exclude='.github' --exclude='node_modules' --exclude='*.zip' --exclude='semantic-output.txt' --exclude='package*.json' . "NoDelete-$VERSION/NoDelete/"
        
        # Create the zip file
        cd "NoDelete-$VERSION"
        zip -r "../NoDelete-$VERSION.zip" NoDelete/
        cd ..
        
        echo "Created NoDelete-$VERSION.zip"
        ls -la "NoDelete-$VERSION.zip"

    - name: Generate changelog
      id: changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges)
        else
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges -10)
        fi
        
        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="- Initial release"
        fi
        
        # Use proper multiline output format
        {
          echo "changelog<<EOF"
          echo "$CHANGELOG"
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: NoDelete v${{ steps.version.outputs.version }}
        body: |
          ## NoDelete v${{ steps.version.outputs.version }}
          
          ### Changes
          ${{ steps.changelog.outputs.changelog }}

          https://legacy.curseforge.com/wow/addons/nodelete
          
          
          ### Installation
          1. Download the `NoDelete-${{ steps.version.outputs.version }}.zip` file below
          2. Extract it to your `World of Warcraft/_classic_/Interface/AddOns/` directory
          3. Restart WoW or type `/reload`
          4. Type `/nodelete` to start protecting your items!
                    
          ### What's Protected
          - ✅ Accidental deletion
          - ✅ Vendor sales  
          - ✅ Auto-buyback if sold
          - ✅ Works with all major bag addons
        files: |
          NoDelete-${{ steps.version.outputs.version }}.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}